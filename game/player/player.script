local data = require "main.data"

local DRAG = 0.1
local ACCEL = 0.2
local SPEED_MAX = 2

function init(self)
	self.snap = true
	self.move = vmath.vector3()
	self.correction = vmath.vector3()
	msg.post(".", "acquire_input_focus")
end

local function quit2menu(self)
	if data.level > data.maxlevel then data.maxlevel = data.level end
	msg.post("main:/sound", "stop_sound")
	msg.post("main:/handler", "show_menu")
end

local function move(self)
	local pos = go.get_position() + self.move
	go.set_position(pos)
	data.playerpos = pos

	if self.snap then
		msg.post("view#script", "snap_to", {position = go.get_position()})
		self.snap = false
	else	
		msg.post("view#script", "look_at", {position = go.get_position()})
	end
end

local function drag(self)
	if self.move.y > 0 then self.move.y = self.move.y - DRAG
		if self.move.y < 0 then self.move.y = 0 end
	elseif self.move.y < 0 then self.move.y = self.move.y + DRAG
		if self.move.y > 0 then self.move.y = 0 end
	end

	if self.move.x > 0 then self.move.x = self.move.x - DRAG
		if self.move.x < 0 then self.move.x = 0 end
	elseif self.move.x < 0 then self.move.x = self.move.x + DRAG
		if self.move.x > 0 then self.move.x = 0 end
	end
end

function update(self, dt)
	if data.state == data.STATE_PLAYING then
		move(self)
		drag(self)
	end
	
	self.correction = vmath.vector3()
end

local function collision(self, message)
	if message.distance > 0 then
		local proj = vmath.project(self.correction, message.normal * message.distance)
		if proj < 1 then
			local comp = (message.distance - message.distance * proj) * message.normal
			go.set_position(go.get_position() + comp)
			self.correction = self.correction + comp
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("position") then
		go.set_position(message.pos)
	elseif message_id == hash("contact_point_response") then
		collision(self, message)
	end
end

local function input_playing(self, action_id, action)
	if action_id == hash("down") then
		self.move.y = self.move.y - ACCEL
		if self.move.y < -SPEED_MAX then self.move.y = -SPEED_MAX end
	elseif action_id == hash("up") then
		self.move.y = self.move.y + ACCEL
		if self.move.y > SPEED_MAX then self.move.y = SPEED_MAX end
	elseif action_id == hash("left") then
		self.move.x = self.move.x - ACCEL
		if self.move.x < -SPEED_MAX then self.move.x = -SPEED_MAX end
	elseif action_id == hash("right") then
		self.move.x = self.move.x + ACCEL
		if self.move.x > SPEED_MAX then self.move.x = SPEED_MAX end
	elseif action_id == hash("action") and action.pressed then
		-- action code
	elseif action_id == hash("exit") and action.pressed then
		msg.post("main:/sound", "stop_sound")
		msg.post("main:/handler", "show_menu")
	elseif action_id == hash("reload") and action.pressed then
		msg.post("game:/loader", "reload_level")
	end
end

local function input_levelclear(self, action_id, action)
	if action_id == hash("action") and action.pressed then
		data.level = data.level + 1
		if data.level > data.MAX_LEVELS then
			data.maxlevel = 1
			data.level = 1
			quit2menu(self)
		else
			msg.post("game:/loader", "new_level")
		end
	end
end

local function input_gameover(self, action_id, action)
	if action_id == hash("action") and action.pressed then
		quit2menu(self)
	end
end

local function input_getready(self, action_id, action)
	if action_id == hash("action") and action.pressed then
		msg.post("view#getready", "hide")
		data.state = data.STATE_PLAYING
	end
end

function on_input(self, action_id, action)
	if data.state == data.STATE_PLAYING then
		input_playing(self, action_id, action)
	elseif data.state == data.STATE_LEVELCLEAR then
		input_levelclear(self, action_id, action)
	elseif data.state == data.STATE_GAMEOVER then
		input_gameover(self, action_id, action)
	elseif data.state == data.STATE_GETREADY then
		input_getready(self, action_id, action)
	end
end
