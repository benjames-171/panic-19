local data = require "main.data"

local DRAG = 0.5
local ACCEL = 0.75
local SPEED_MAX = 2
local HOP_SPEED = 0.1
local INVUL = 60
local ETHER_TIME = 300

function init(self)
	self.dust = false
	self.teleport = false
	self.invul = INVUL
	self.ether = 0
	self.move = vmath.vector3()
	self.dir = vmath.vector3()
	msg.post(".", "acquire_input_focus")
	sound.play("main:/sound#music")
end

local function quit2menu(self)
	if data.level > data.maxlevel then data.maxlevel = data.level end
	msg.post("main:/sound", "stop_sound")
	msg.post("main:/handler", "show_menu")
end

local function move(self)
	local pos = go.get_position() + self.move
	go.set_position(pos)
	data.playerpos = pos
end

local function drag(self)
	if self.move.x > 0 then self.move.x = self.move.x - DRAG
		if self.move.x < 0 then self.move.x = 0 end
	elseif self.move.x < 0 then self.move.x = self.move.x + DRAG
		if self.move.x > 0 then self.move.x = 0 end
	end
end

local function anim(self)
	if self.move.x ~= 0 and self.dir.x ~= self.anim.x then
		if self.dir.x == -1 then
			msg.post("#sprite", "play_animation", {id = hash("run")})
			sprite.set_hflip("#sprite", true)
			self.anim.x = -1
		else
			msg.post("#sprite", "play_animation", {id = hash("run")})
			sprite.set_hflip("#sprite", false)
			self.anim.x = 1
		end
	elseif self.move.x == 0 then
		if self.dir.x == -1 then
			msg.post("#sprite", "play_animation", {id = hash("static")})
			sprite.set_hflip("#sprite", true)
			self.anim = vmath.vector3(0,0,0)
		else
			msg.post("#sprite", "play_animation", {id = hash("static")})
			sprite.set_hflip("#sprite", false)
			self.anim = vmath.vector3(0,0,0)
		end
	end
end

local function dust(self)
	if not self.dust and self.move.x ~= 0 then
		self.dust = true
		particlefx.play("#dust")
	elseif self.dust and self.move.x == 0 then
		self.dust = false
		particlefx.stop("#dust")
	end
end

local function item(self)
	local pos = go.get_position()
	pos = data.world2tile(pos)
	local t = tilemap.get_tile("/level#tilemap", "item", pos.x, pos.y)
	if t == 2 then self.ether = ETHER_TIME
		tilemap.set_tile("/level#tilemap", "item", pos.x, pos.y, 0)
		sound.play("main:/sound#gem")
		sprite.set_constant("#sprite", "tint", vmath.vector4(1,1,1,0.5))
		msg.post("#co", "disable")
	elseif t == 4 then
		tilemap.set_tile("/level#tilemap", "item", pos.x, pos.y, 0)
		sound.play("main:/sound#pickup")
		data.gems = data.gems + 1
	elseif t == 12 and data.hp < 5 then
		tilemap.set_tile("/level#tilemap", "item", pos.x, pos.y, 0)
		sound.play("main:/sound#heart")
		data.hp = data.hp + 1
	end
end

local function cond(self)
	if data.gems == data.gemstotal then
		msg.post("view#clear", "show")
		msg.post("#sprite", "play_animation", {id = hash("static")})
		particlefx.stop("#dust")
	elseif data.hp <= 0 then
		msg.post("view#gameover", "show")
		msg.post("#sprite", "disable")
		particlefx.stop("#dust")
	end
end

local function flash(self)
	if self.invul > 0 then
		self.invul = self.invul - 1
		if self.invul == 0 then
			--
		elseif self.invul % 6 < 3 then
			msg.post("#sprite", "enable")
		else
			msg.post("#sprite", "disable")
		end
	end

	if self.ether > 0 then
		self.ether = self.ether - 1
		if self.ether == 0 then
			sprite.set_constant("#sprite", "tint", vmath.vector4(1,1,1,1))
			msg.post("#co", "enable")
		end
		msg.post("view#game", "san", {val = self.ether / ETHER_TIME})
	end
end

function update(self, dt)
	if data.state == data.STATE_PLAYING then
		move(self)
		drag(self)
		anim(self)
		dust(self)
		item(self)
		cond(self)
		flash(self)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("position") then
		go.set_position(message.pos)
	elseif message_id == hash("contact_point_response") then
		if self.invul == 0 then data.hp = data.hp - 1 end
		self.invul = INVUL
	end
end

local function landed(self, url, property)
	self.teleport = false
end

local function tryup(self)
	local t = 0
	local pos = go.get_position()
	pos = data.world2tile(pos)

	repeat
		t = tilemap.get_tile("/level#tilemap", "world", pos.x, pos.y)
		pos.y = pos.y + 1
	until t > 0

	if t >= 61 then
	elseif t > 1 then
		pos = data.tile2world(pos)
		self.teleport = true
		go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, pos.y, go.EASING_OUTQUAD, HOP_SPEED, 0, landed)
		go.animate(".", "scale.x", go.PLAYBACK_ONCE_PINGPONG, 0.25, go.EASING_LINEAR, HOP_SPEED)
		go.animate(".", "scale.y", go.PLAYBACK_ONCE_PINGPONG, 4, go.EASING_LINEAR, HOP_SPEED)
		sound.play("main:/sound#teleport")
	end
end

local function trydown(self)
	local t = 0
	local pos = go.get_position()
	pos = data.world2tile(pos)
	pos.y = pos.y - 1

	repeat
		pos.y = pos.y - 1
		t = tilemap.get_tile("/level#tilemap", "world", pos.x, pos.y)
	until t > 0

	if t >= 61 then
	elseif t > 1 then
		pos.y = pos.y + 1
		pos = data.tile2world(pos)
		self.teleport = true
		go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, pos.y, go.EASING_OUTQUAD, HOP_SPEED, 0, landed)
		go.animate(".", "scale.x", go.PLAYBACK_ONCE_PINGPONG, 0.25, go.EASING_LINEAR, HOP_SPEED)
		go.animate(".", "scale.y", go.PLAYBACK_ONCE_PINGPONG, 4, go.EASING_LINEAR, HOP_SPEED)
		sound.play("main:/sound#teleport")
	end
end


local function tryleft(self)
	local t = 0
	local pos = go.get_position()
	pos = data.world2tile(pos)
	pos.y = pos.y - 1

	repeat
		pos.x = pos.x - 1
		t = tilemap.get_tile("/level#tilemap", "world", pos.x, pos.y)
	until t > 0

	if t >= 61 then
	elseif t > 1 then
		pos.y = pos.y + 1
		pos = data.tile2world(pos)
		self.teleport = true
		go.animate(".", "position.x", go.PLAYBACK_ONCE_FORWARD, pos.x, go.EASING_OUTQUAD, HOP_SPEED, 0, landed)
		go.animate(".", "scale.x", go.PLAYBACK_ONCE_PINGPONG, 4, go.EASING_LINEAR, HOP_SPEED)
		go.animate(".", "scale.y", go.PLAYBACK_ONCE_PINGPONG, 0.25, go.EASING_LINEAR, HOP_SPEED)
		sound.play("main:/sound#teleport")
	end
end

local function tryright(self)
	local t = 0
	local pos = go.get_position()
	pos = data.world2tile(pos)
	pos.y = pos.y - 1

	repeat
		pos.x = pos.x + 1
		t = tilemap.get_tile("/level#tilemap", "world", pos.x, pos.y)
	until t > 0
	
	if t >= 61 then
	elseif t > 1 then
		pos.y = pos.y + 1
		pos = data.tile2world(pos)
		self.teleport = true
		go.animate(".", "position.x", go.PLAYBACK_ONCE_FORWARD, pos.x, go.EASING_OUTQUAD, HOP_SPEED, 0, landed)
		go.animate(".", "scale.x", go.PLAYBACK_ONCE_PINGPONG, 4, go.EASING_LINEAR, HOP_SPEED)
		go.animate(".", "scale.y", go.PLAYBACK_ONCE_PINGPONG, 0.25, go.EASING_LINEAR, HOP_SPEED)
		sound.play("main:/sound#teleport")
	end
end

local function left(self, pressed)
	self.move.x = self.move.x - ACCEL
	if self.move.x < -SPEED_MAX then self.move.x = -SPEED_MAX end
	self.dir.x = -1

	local pos = go.get_position()
	pos.x = pos.x - 2
	pos.y = pos.y - 9
	pos = data.world2tile(pos)
	local t = tilemap.get_tile("/level#tilemap", "world", pos.x, pos.y)
	if t <= 1 then
		self.move = vmath.vector3()
		if pressed then tryleft(self) end
	end
end

local function right(self, pressed)
	self.move.x = self.move.x + ACCEL
	if self.move.x > SPEED_MAX then self.move.x = SPEED_MAX end
	self.dir.x = 1

	local pos = go.get_position()
	pos.x = pos.x + 2
	pos.y = pos.y - 9
	pos = data.world2tile(pos)
	local t = tilemap.get_tile("/level#tilemap", "world", pos.x, pos.y)
	if t <= 1 then
		self.move = vmath.vector3()
		if pressed then tryright(self) end
	end
end

local function input_playing(self, action_id, action)
	if action_id == hash("down") and action.pressed then
		trydown(self)
	elseif action_id == hash("up") and action.pressed then
		tryup(self)
	elseif action_id == hash("left") then
		left(self, action.pressed)
	elseif action_id == hash("right") then
		right(self, action.pressed)
	elseif action_id == hash("action") and action.pressed then
		-- action code
	elseif action_id == hash("exit") and action.pressed then
		quit2menu(self)
	end
end

local function input_levelclear(self, action_id, action)
	if action_id == hash("action") and action.pressed then
		data.level = data.level + 1
		if data.level > data.MAX_LEVELS then
			data.maxlevel = 1
			data.level = 1
			quit2menu(self)
		else
			msg.post("/level#enemies", "deleteall")
			msg.post("/level", "new_level")
			msg.post("view#clear", "hide")
			msg.post("view#shutter", "reset")
			self.ether = 1
			self.invul = INVUL
			data.state = data.STATE_PLAYING
		end
	end
end

local function input_gameover(self, action_id, action)
	if action_id == hash("action") and action.pressed then
		quit2menu(self)
	end
end

function on_input(self, action_id, action)
	if data.state == data.STATE_PLAYING and not self.teleport then
		input_playing(self, action_id, action)
	elseif data.state == data.STATE_LEVELCLEAR then
		input_levelclear(self, action_id, action)
	elseif data.state == data.STATE_GAMEOVER then
		input_gameover(self, action_id, action)
	end
end
